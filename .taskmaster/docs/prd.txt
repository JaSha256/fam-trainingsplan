# Product Requirements Document: FAM Trainingsplan - Interaktive Trainingsplattform

## Projekt-Übersicht

**Projektname:** FAM Trainingsplan
**Version:** 2.4.0 → 3.0.0
**Zielgruppe:** Free Arts of Movement (FAM) München - Parkour, Trampolin, Tricking Community
**Plattform:** Progressive Web App (PWA) - Desktop, Mobile, Tablet
**Tech-Stack:** Alpine.js 3.15, Vite 7, Tailwind CSS v4, Leaflet, Fuse.js

## Projekt-Status

### Bestehende Implementierung (v2.4.0)
- ✅ Vollständig modulare Architektur mit 10+ spezialisierten Modulen
- ✅ TypeScript Type Safety via JSDoc
- ✅ 81.71% Test Coverage (313 Unit Tests, 60 Integration Tests)
- ✅ Responsive Design mit Mobile-First Ansatz
- ✅ PWA-Ready mit Offline-Funktionalität
- ✅ Alpine.js Store-basiertes State Management
- ✅ URL-basierte Filter-Persistierung
- ✅ Favoriten-System mit LocalStorage
- ✅ Geolocation mit Distanz-Berechnung
- ✅ Leaflet Karten-Integration mit Clustering
- ✅ Kalender-Export (.ics) für Google/Apple/Outlook
- ✅ Fuzzy-Search mit Fuse.js
- ✅ Quick-Filter System
- ✅ Auto-Update-Check Mechanismus

### Existierende Module

#### Core Architecture (/src/js/trainingsplaner/)
1. **state.js** - Zentrales State Management
2. **url-filters-manager.js** - URL-Parameter Handling & Sharing
3. **filter-engine.js** - Filtering Logic & Fuse.js Integration
4. **favorites-manager.js** - Favoriten CRUD & LocalStorage
5. **geolocation-manager.js** - GPS & Distanz-Berechnung
6. **map-manager.js** - Leaflet Map & Clustering
7. **map-controls.js** - Map Interactions
8. **data-loader.js** - JSON Loading & Caching
9. **actions-manager.js** - Calendar Export & Share API
10. **quick-filters.js** - Quick Filter Definitions

#### Support Modules
- **utils.js** - Helper Functions (Zeit-Parsing, Favoriten API)
- **config.js** - Zentrale Konfiguration & Feature Flags
- **types.js** - TypeScript Type Definitions

### Test-Infrastruktur
- **Unit Tests:** Vitest mit jsdom (81.71% Coverage)
- **Integration Tests:** Playwright Integration Config (60 Tests)
- **E2E Tests:** Playwright mit 20+ Testsuites
  - Accessibility Tests (WCAG)
  - Performance Tests
  - Visual Regression Tests
  - PWA Offline Tests
  - User Flow Tests
  - Touch Target Tests

## Identifizierte Verbesserungsbereiche

### 1. Performance Optimierung

#### 1.1 Virtual Scrolling für große Datensätze
**Problem:** Bei >200 Trainings wird DOM-Rendering langsam
**Lösung:** Implementiere Virtual Scrolling mit `@tanstack/virtual` oder ähnlich
**User Story:** Als User möchte ich auch bei 1000+ Trainings flüssige Performance
**Akzeptanzkriterien:**
- Smooth scrolling auch bei 1000+ Trainings
- <16ms Frame Time (60fps)
- Lighthouse Performance Score >95

#### 1.2 Code Splitting Optimierung
**Problem:** Vendor Bundle könnte weiter optimiert werden
**Lösung:** Dynamic Imports für Leaflet, Fuse.js, weniger genutzte Features
**Akzeptanzkriterien:**
- Initial Bundle <150KB (gzipped)
- Leaflet lazy-loaded beim ersten Map-Open
- Fuse.js lazy-loaded beim ersten Search

#### 1.3 Image Optimization
**Problem:** Training-Bilder (falls zukünftig hinzugefügt) nicht optimiert
**Lösung:** WebP/AVIF mit Fallbacks, Lazy Loading, Responsive Images
**Akzeptanzkriterien:**
- WebP/AVIF format support
- Lazy loading mit Intersection Observer
- srcset für responsive images

### 2. UX/UI Verbesserungen

#### 2.1 Multi-Select Filter Enhancement
**Problem:** User können nur einen Wochentag/Ort gleichzeitig filtern
**Lösung:** Multi-Select Dropdowns oder Checkbox-Groups
**User Story:** Als User möchte ich Trainings für mehrere Tage gleichzeitig sehen
**Akzeptanzkriterien:**
- Multi-Select für Wochentag, Ort, Training, Altersgruppe
- Visuelle Kennzeichnung der Anzahl gewählter Filter
- "Alle auswählen" / "Alle abwählen" Buttons

#### 2.2 Advanced Sorting Options
**Problem:** Nur Standard-Sortierung verfügbar
**Lösung:** User-definierbare Sortierung
**User Story:** Als User möchte ich Trainings nach verschiedenen Kriterien sortieren
**Akzeptanzkriterien:**
- Sortierung nach: Uhrzeit, Entfernung, Wochentag, Ort, Training
- Multi-Level Sorting (Primär, Sekundär, Tertiär)
- Persistent Sorting Preferences in LocalStorage

#### 2.3 Training Detail Modal
**Problem:** Alle Infos in Card-Ansicht kann überladen wirken
**Lösung:** Kompakte Cards + Detail-Modal bei Klick
**Akzeptanzkriterien:**
- Kompakte Training Cards mit wichtigsten Infos
- Modal mit vollständigen Details
- Modal mit Kalender-Export, Share, Favorit Buttons
- Keyboard-Navigation (Arrow Keys für nächstes/vorheriges Training)

#### 2.4 Dark Mode
**Problem:** Nur Light Mode verfügbar
**Lösung:** Dark Mode mit System Preference Detection
**Akzeptanzkriterien:**
- Dark Mode Theme
- Auto-Detection via `prefers-color-scheme`
- Toggle-Button im Header
- Persistent Preference in LocalStorage

#### 2.5 Accessibility Improvements
**Problem:** WCAG AAA Compliance noch nicht vollständig
**Lösung:** Umfassende A11y Verbesserungen
**Akzeptanzkriterien:**
- WCAG 2.1 Level AAA Compliance
- Screen Reader friendly ARIA labels
- Keyboard Navigation für alle Features
- Focus Management in Modals
- High Contrast Mode Support

### 3. Feature Erweiterungen

#### 3.1 Trainer-Profile
**Problem:** User wissen nicht, wer trainiert
**Lösung:** Trainer-Profile mit Bild, Bio, Spezialisierung
**User Story:** Als User möchte ich mehr über die Trainer erfahren
**Akzeptanzkriterien:**
- Trainer-Profil Modal
- Trainer-Bild, Name, Bio, Spezialisierung
- Verknüpfung von Training → Trainer
- "Alle Trainings von Trainer X" Filter

#### 3.2 Trainings-Historie & Statistiken
**Problem:** User können nicht sehen, welche Trainings sie besucht haben
**Lösung:** Check-In System mit Historie
**User Story:** Als User möchte ich sehen, wie oft ich trainiert habe
**Akzeptanzkriterien:**
- "Check-In" Button pro Training
- Historie in LocalStorage
- Statistik-Dashboard (Trainings pro Woche/Monat, häufigste Trainingsart, etc.)
- Streak-Counter ("Du hast 10 Tage in Folge trainiert!")

#### 3.3 Benachrichtigungen für Favoriten
**Problem:** User verpassen ihre Lieblings-Trainings
**Lösung:** Push Notifications für Favoriten
**User Story:** Als User möchte ich erinnert werden, bevor mein Lieblings-Training beginnt
**Akzeptanzkriterien:**
- Push Notification Opt-In
- Konfigurierbare Erinnerungszeit (30min, 1h, 2h vorher)
- Notifications nur für Favoriten
- "Snooze" Funktion

#### 3.4 Social Features
**Problem:** Community kann sich nicht vernetzen
**Lösung:** "Wer geht hin?" Feature
**User Story:** Als User möchte ich sehen, wer zu welchem Training geht
**Akzeptanzkriterien:**
- "Ich gehe hin" Button
- Liste der Teilnehmer (optional öffentlich)
- User-Profile mit Trainingsaktivität
- Benachrichtigung wenn Freunde sich anmelden

#### 3.5 Trainings-Bewertungen
**Problem:** Keine Qualitäts-Feedback Möglichkeit
**Lösung:** 5-Sterne Rating + Reviews
**User Story:** Als User möchte ich Trainings bewerten und Reviews lesen
**Akzeptanzkriterien:**
- 5-Sterne Rating System
- Text-Reviews (optional)
- Durchschnittliche Bewertung pro Training
- Moderation für Reviews

#### 3.6 Kalender-Integration (fortgeschritten)
**Problem:** .ics Export ist umständlich
**Lösung:** Direkte Google/Apple Calendar Integration
**User Story:** Als User möchte ich Trainings direkt in meinen Kalender synchronisieren
**Akzeptanzkriterien:**
- Google Calendar API Integration
- Apple Calendar API Integration (iOS)
- Auto-Sync für Favoriten
- Bi-direktional (Training-Änderungen updaten Kalender)

#### 3.7 Probetraining-Workflow
**Problem:** Probetraining-Anmeldung führt zu externer Seite
**Lösung:** Integrierter Probetraining-Workflow
**User Story:** Als Neuer möchte ich Probetraining direkt buchen
**Akzeptanzkriterien:**
- "Probetraining buchen" Modal
- Formular mit Name, Email, Telefon, gewünschte Trainingsart
- Email-Benachrichtigung an FAM Team
- Bestätigungs-Email an User

### 4. Technische Verbesserungen

#### 4.1 Backend API statt statischem JSON
**Problem:** Statisches JSON nicht skalierbar für dynamische Features
**Lösung:** REST API oder GraphQL Backend
**Akzeptanzkriterien:**
- Node.js/Deno Backend mit REST API
- Endpoints: `/trainings`, `/trainers`, `/bookings`, `/reviews`
- PostgreSQL oder MongoDB Datenbank
- Authentication (JWT) für User Features
- Admin Panel für Trainings-Management

#### 4.2 Real-time Updates
**Problem:** User sehen keine Live-Änderungen
**Lösung:** WebSocket für Real-time Updates
**Akzeptanzkriterien:**
- WebSocket Connection für Live Updates
- Training-Änderungen erscheinen sofort bei allen Users
- "X User schauen gerade diese Seite an" Indicator

#### 4.3 Error Tracking & Analytics
**Problem:** Keine Fehler-Überwachung
**Lösung:** Sentry für Error Tracking, Plausible für Privacy-friendly Analytics
**Akzeptanzkriterien:**
- Sentry Integration für Error Tracking
- Plausible Analytics (DSGVO-konform)
- Performance Monitoring (Core Web Vitals)
- User Feedback Widget

#### 4.4 Internationalization (i18n)
**Problem:** Nur deutsche Sprache
**Lösung:** Multi-Language Support
**Akzeptanzkriterien:**
- i18n Framework (z.B. `@formatjs/intl`)
- Deutsch, Englisch als Sprachen
- Language Toggle im Header
- Persistent Language Preference

#### 4.5 Testing Erweiterungen
**Problem:** Function Coverage nur 72.94%
**Lösung:** Erhöhung der Test Coverage auf >90%
**Akzeptanzkriterien:**
- Function Coverage >90%
- Integration Tests für alle Critical Paths
- Visual Regression Tests für alle Components
- Performance Tests mit Lighthouse CI

### 5. DevOps & Deployment

#### 5.1 CI/CD Pipeline Optimierung
**Problem:** Manuelle Deployment-Schritte
**Lösung:** Vollautomatische CI/CD mit GitHub Actions
**Akzeptanzkriterien:**
- GitHub Actions Workflow
- Auto-Tests bei Pull Requests
- Auto-Deploy zu Production bei Merge zu Main
- Staging Environment für Testing

#### 5.2 Monitoring & Alerting
**Problem:** Keine Production Monitoring
**Lösung:** Uptime Monitoring & Error Alerting
**Akzeptanzkriterien:**
- Uptime Monitoring (z.B. UptimeRobot)
- Error Alerting via Sentry
- Performance Degradation Alerts
- Weekly/Monthly Reports

#### 5.3 Documentation
**Problem:** Code Documentation teilweise unvollständig
**Lösung:** Umfassende Documentation mit JSDoc + Storybook
**Akzeptanzkriterien:**
- JSDoc für alle Public Functions
- Storybook für UI Components
- Architecture Decision Records (ADRs)
- Contributor Guide

## Implementierungs-Phasen

### Phase 1: UX Improvements (Priorität: Hoch)
**Geschätzte Dauer:** 3-4 Wochen
- Multi-Select Filter (2.1)
- Training Detail Modal (2.3)
- Advanced Sorting (2.2)
- Dark Mode (2.4)
- Accessibility Improvements (2.5)

### Phase 2: Performance Optimierung (Priorität: Hoch)
**Geschätzte Dauer:** 2-3 Wochen
- Virtual Scrolling (1.1)
- Code Splitting Optimierung (1.2)
- Image Optimization (1.3)

### Phase 3: Basic Backend (Priorität: Mittel)
**Geschätzte Dauer:** 4-6 Wochen
- Backend API Setup (4.1)
- Authentication System
- Admin Panel (Basic)
- Probetraining-Workflow (3.7)

### Phase 4: Social Features (Priorität: Mittel)
**Geschätzte Dauer:** 3-4 Wochen
- Trainer-Profile (3.1)
- Trainings-Historie (3.2)
- Social Features (3.4)

### Phase 5: Advanced Features (Priorität: Niedrig)
**Geschätzte Dauer:** 4-5 Wochen
- Push Notifications (3.3)
- Kalender-Integration (3.6)
- Trainings-Bewertungen (3.5)
- Real-time Updates (4.2)

### Phase 6: DevOps & Quality (Priorität: Kontinuierlich)
**Geschätzte Dauer:** Kontinuierlich
- CI/CD Optimierung (5.1)
- Error Tracking & Analytics (4.3)
- Monitoring & Alerting (5.2)
- Documentation (5.3)
- Testing Erweiterungen (4.5)

## Erfolgskriterien

### Quantitative Metriken
- **Performance:** Lighthouse Score >95 (aktuell: keine Baseline)
- **Test Coverage:** >90% (aktuell: 81.71%)
- **Bundle Size:** <150KB initial (aktuell: nicht gemessen)
- **Load Time:** <2s (aktuell: nicht gemessen)
- **Error Rate:** <0.1% (aktuell: keine Überwachung)

### Qualitative Metriken
- **User Satisfaction:** User Feedback Score >4.5/5
- **Accessibility:** WCAG 2.1 AAA Compliance
- **Mobile Experience:** Touch-optimiert, flüssige Gesten
- **Developer Experience:** Gute Documentation, leichte Contribution

## Risiken & Mitigationen

### Risiko 1: Komplexität durch Backend
**Wahrscheinlichkeit:** Mittel
**Impact:** Hoch
**Mitigation:** Inkrementelle Backend-Einführung, Feature Flags, Rollback-Plan

### Risiko 2: Performance-Regression durch neue Features
**Wahrscheinlichkeit:** Mittel
**Impact:** Mittel
**Mitigation:** Performance Budgets, Lighthouse CI, regelmäßige Audits

### Risiko 3: Accessibility-Probleme
**Wahrscheinlichkeit:** Niedrig
**Impact:** Hoch (rechtlich relevant)
**Mitigation:** Automated A11y Tests, manuelle Screen Reader Tests, externe Audits

### Risiko 4: User-Adoption von neuen Features
**Wahrscheinlichkeit:** Mittel
**Impact:** Mittel
**Mitigation:** User Research, Beta Testing, schrittweise Rollouts, Onboarding

## Anhang

### Technische Architektur (Aktuell)
```
src/
├── js/
│   ├── trainingsplaner.js          # Main Alpine Component (Factory Pattern)
│   ├── config.js                    # Zentrale Config & Feature Flags
│   ├── utils.js                     # Helper Functions
│   └── trainingsplaner/             # Modular Architecture
│       ├── state.js                 # State Factory
│       ├── filter-engine.js         # FilterEngine Class
│       ├── favorites-manager.js     # FavoritesManager Class
│       ├── geolocation-manager.js   # GeolocationManager Class
│       ├── map-manager.js           # MapManager Class
│       ├── data-loader.js           # DataLoader Class
│       ├── actions-manager.js       # ActionsManager Class
│       ├── url-filters-manager.js   # UrlFiltersManager Class
│       └── quick-filters.js         # Quick Filter Definitions
```

### Deployment-Architektur (Vorgeschlagen)
```
Frontend (Vite + Alpine.js)
    ↓
CDN (Cloudflare/Vercel)
    ↓
Backend API (Node.js + Express/Fastify)
    ↓
Database (PostgreSQL/MongoDB)
    ↓
File Storage (S3 für Trainer-Bilder)
```

### Technologie-Stack (Aktuell vs. Vorgeschlagen)

| Komponente | Aktuell | Vorgeschlagen |
|------------|---------|---------------|
| Frontend Framework | Alpine.js 3.15 | Alpine.js 3.15 (beibehalten) |
| Build Tool | Vite 7 | Vite 7 (beibehalten) |
| CSS Framework | Tailwind CSS v4 | Tailwind CSS v4 (beibehalten) |
| State Management | Alpine Store | Alpine Store (beibehalten) |
| Maps | Leaflet 1.9.4 | Leaflet 1.9.4 (beibehalten) |
| Search | Fuse.js 7.0 | Fuse.js 7.0 (beibehalten) |
| Testing (Unit) | Vitest | Vitest (beibehalten) |
| Testing (E2E) | Playwright | Playwright (beibehalten) |
| Backend | - | Node.js + Fastify |
| Database | - | PostgreSQL |
| ORM | - | Prisma |
| Authentication | - | JWT + Passport.js |
| Error Tracking | - | Sentry |
| Analytics | - | Plausible |
| Hosting Frontend | GitHub Pages | Vercel/Cloudflare |
| Hosting Backend | - | Railway/Render |

## Zusammenfassung

Dieses PRD definiert einen evolutionären Entwicklungsplan für den FAM Trainingsplan von v2.4.0 zu v3.0.0. Die bestehende, gut strukturierte Codebasis wird als Fundament genutzt, um schrittweise neue Features und Verbesserungen einzuführen.

**Kern-Prioritäten:**
1. **UX Improvements** für bessere User Experience
2. **Performance Optimierung** für Skalierbarkeit
3. **Backend-Integration** für dynamische Features
4. **Social Features** für Community-Building

**Philosophie:**
- Evolutionär statt revolutionär
- Bestehende Architektur respektieren
- TDD-Ansatz beibehalten
- Hohe Test Coverage anstreben
- Accessibility als Pflicht, nicht Kür
- Performance Budgets einhalten

**Nächste Schritte:**
1. Stakeholder-Review dieses PRDs
2. Priorisierung der Features mit Product Owner
3. Technische Spikes für kritische Komponenten (Virtual Scrolling, Backend Architecture)
4. Erstellung detaillierter User Stories & Tasks
5. Sprint Planning für Phase 1
