// tests/unit/iframe-resize.test.js
import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'
import {
  initIframeAutoResize,
  notifyParentHeight,
  forceResize,
  getState,
  destroyIframeAutoResize
} from '../../src/js/iframe-resize.js'
import { CONFIG } from '../../src/js/config.js'

describe('iframe-resize.js', () => {
  let mockParent
  let mockResizeObserver
  let mockMutationObserver

  beforeEach(() => {
    // Mock window.parent
    mockParent = {
      postMessage: vi.fn()
    }
    Object.defineProperty(window, 'parent', {
      value: mockParent,
      writable: true,
      configurable: true
    })

    // Mock window.self !== window.top
    Object.defineProperty(window, 'self', {
      value: window,
      writable: true,
      configurable: true
    })
    Object.defineProperty(window, 'top', {
      value: {},
      writable: true,
      configurable: true
    })

    // Mock ResizeObserver
    mockResizeObserver = {
      observe: vi.fn(),
      disconnect: vi.fn()
    }
    global.ResizeObserver = vi.fn((callback) => {
      mockResizeObserver.callback = callback
      return mockResizeObserver
    })

    // Mock MutationObserver
    mockMutationObserver = {
      observe: vi.fn(),
      disconnect: vi.fn()
    }
    global.MutationObserver = vi.fn((callback) => {
      mockMutationObserver.callback = callback
      return mockMutationObserver
    })

    // Mock document.referrer
    Object.defineProperty(document, 'referrer', {
      value: 'https://parent.example.com/page',
      writable: true,
      configurable: true
    })

    // Create mock DOM elements
    document.body.innerHTML = `
      <div id="trainings-container">
        <div class="training-card">Training 1</div>
        <div class="training-card">Training 2</div>
      </div>
    `

    // Note: CONFIG.iframe is frozen and defaults to:
    // - enabled: true
    // - autoResize: true (but we cleanup before each test)
    // - allowedOrigins: includes parent.example.com

    // Clean up any previous initialization
    destroyIframeAutoResize()
  })

  afterEach(() => {
    destroyIframeAutoResize()
    vi.clearAllMocks()
    document.body.innerHTML = ''
  })

  // ==================== INITIALIZATION ====================

  describe('initIframeAutoResize()', () => {
    it('should initialize successfully', () => {
      const result = initIframeAutoResize()

      expect(result).toBe(true)
      expect(getState().isInitialized).toBe(true)
    })

    it('should not initialize twice', () => {
      initIframeAutoResize()
      const result = initIframeAutoResize()

      expect(result).toBe(false)
    })

    it('should accept custom parent origin', () => {
      initIframeAutoResize({ parentOrigin: 'https://custom.com' })

      const state = getState()
      expect(state.parentOrigin).toBe('https://custom.com')
    })

    it('should use custom target selector', () => {
      document.body.innerHTML = '<div id="custom-target"></div>'

      initIframeAutoResize({ targetSelector: '#custom-target' })

      expect(getState().isInitialized).toBe(true)
    })

    it('should fallback to body if no target found', () => {
      document.body.innerHTML = ''

      const result = initIframeAutoResize({ targetSelector: '#nonexistent' })

      expect(result).toBe(true)
    })

    it('should setup ResizeObserver', () => {
      initIframeAutoResize()

      expect(global.ResizeObserver).toHaveBeenCalled()
      expect(mockResizeObserver.observe).toHaveBeenCalled()
      expect(getState().hasResizeObserver).toBe(true)
    })

    it('should setup MutationObserver', () => {
      initIframeAutoResize()

      expect(global.MutationObserver).toHaveBeenCalled()
      expect(mockMutationObserver.observe).toHaveBeenCalled()
      expect(getState().hasMutationObserver).toBe(true)
    })

    it('should setup event listeners', () => {
      initIframeAutoResize()

      const state = getState()
      expect(state.eventListenerCount).toBeGreaterThan(0)
    })

    it('should expose global functions', () => {
      initIframeAutoResize()

      expect(window.notifyParentHeight).toBeDefined()
      expect(window.forceIframeResize).toBeDefined()
    })

    it('should handle missing ResizeObserver gracefully', () => {
      global.ResizeObserver = undefined

      const result = initIframeAutoResize()

      expect(result).toBe(true)
      expect(getState().hasResizeObserver).toBe(false)
    })

    it('should handle missing MutationObserver gracefully', () => {
      global.MutationObserver = undefined

      const result = initIframeAutoResize()

      expect(result).toBe(true)
      expect(getState().hasMutationObserver).toBe(false)
    })
  })

  // ==================== ORIGIN DETECTION ====================

  describe('Origin Detection', () => {
    it('should detect origin from document.referrer', () => {
      initIframeAutoResize()

      const state = getState()
      expect(state.parentOrigin).toBe('https://parent.example.com')
    })

    it('should use config fallback if no referrer', () => {
      Object.defineProperty(document, 'referrer', {
        value: '',
        writable: true,
        configurable: true
      })

      CONFIG.iframe.parentOrigin = 'https://fallback.com'

      initIframeAutoResize()

      const state = getState()
      expect(state.parentOrigin).toBe('https://fallback.com')
    })

    it('should use wildcard if no origin available', () => {
      Object.defineProperty(document, 'referrer', {
        value: '',
        writable: true,
        configurable: true
      })

      delete CONFIG.iframe.parentOrigin

      initIframeAutoResize()

      const state = getState()
      expect(state.parentOrigin).toBe('*')
    })
  })

  // ==================== HEIGHT CALCULATION ====================

  describe('Height Calculation', () => {
    it('should calculate height for list view', () => {
      initIframeAutoResize()

      vi.useFakeTimers()
      notifyParentHeight()
      vi.advanceTimersByTime(100)
      vi.runAllTimers()

      expect(mockParent.postMessage).toHaveBeenCalledWith(
        expect.objectContaining({
          type: 'resize',
          view: 'list',
          height: expect.any(Number)
        }),
        expect.any(String)
      )

      vi.useRealTimers()
    })

    it('should use minimum height constraint', () => {
      document.body.innerHTML = '<div style="height: 100px;"></div>'

      initIframeAutoResize()

      vi.useFakeTimers()
      forceResize()
      vi.runAllTimers()

      expect(mockParent.postMessage).toHaveBeenCalledWith(
        expect.objectContaining({
          height: expect.any(Number)
        }),
        expect.any(String)
      )

      const sentHeight = mockParent.postMessage.mock.calls[0][0].height
      expect(sentHeight).toBeGreaterThanOrEqual(400) // MINIMUM_HEIGHT

      vi.useRealTimers()
    })

    it('should use maximum height constraint', () => {
      // Can't easily test max height in jsdom, but we can verify it exists
      initIframeAutoResize()
      forceResize()

      expect(mockParent.postMessage).toHaveBeenCalled()
    })

    it('should detect map view from Alpine store', () => {
      // Mock Alpine store
      window.Alpine = {
        store: vi.fn((name) => {
          if (name === 'ui') {
            return { mapView: true }
          }
        })
      }

      initIframeAutoResize()

      vi.useFakeTimers()
      forceResize()
      vi.runAllTimers()

      expect(mockParent.postMessage).toHaveBeenCalledWith(
        expect.objectContaining({
          view: 'map'
        }),
        expect.any(String)
      )

      vi.useRealTimers()
      delete window.Alpine
    })

    it('should fallback to DOM check for map view', () => {
      document.body.innerHTML = `
        <div x-show="$store.ui.mapView" style="display: block;">Map</div>
      `

      initIframeAutoResize()

      vi.useFakeTimers()
      forceResize()
      vi.runAllTimers()

      // Should detect map view from DOM
      expect(mockParent.postMessage).toHaveBeenCalled()

      vi.useRealTimers()
    })
  })

  // ==================== NOTIFY PARENT HEIGHT ====================

  describe('notifyParentHeight()', () => {
    it('should not notify if window.parent === window', () => {
      Object.defineProperty(window, 'parent', {
        value: window,
        writable: true,
        configurable: true
      })

      initIframeAutoResize()
      notifyParentHeight()

      vi.useFakeTimers()
      vi.runAllTimers()

      expect(mockParent.postMessage).not.toHaveBeenCalled()

      vi.useRealTimers()
    })

    it('should not notify if iframe disabled', () => {
      CONFIG.iframe.enabled = false

      initIframeAutoResize()
      notifyParentHeight()

      vi.useFakeTimers()
      vi.runAllTimers()

      expect(mockParent.postMessage).not.toHaveBeenCalled()

      vi.useRealTimers()
      CONFIG.iframe.enabled = true
    })

    it('should debounce notifications', () => {
      initIframeAutoResize()

      vi.useFakeTimers()

      notifyParentHeight()
      notifyParentHeight()
      notifyParentHeight()

      vi.advanceTimersByTime(30) // Less than DEBOUNCE_DELAY

      expect(mockParent.postMessage).not.toHaveBeenCalled()

      vi.advanceTimersByTime(100) // Past DEBOUNCE_DELAY
      vi.runAllTimers()

      expect(mockParent.postMessage).toHaveBeenCalledTimes(1)

      vi.useRealTimers()
    })

    it('should include timestamp in message', () => {
      initIframeAutoResize()

      vi.useFakeTimers()
      const now = Date.now()
      forceResize()
      vi.runAllTimers()

      expect(mockParent.postMessage).toHaveBeenCalledWith(
        expect.objectContaining({
          timestamp: expect.any(Number)
        }),
        expect.any(String)
      )

      vi.useRealTimers()
    })

    it('should include source identifier', () => {
      initIframeAutoResize()

      vi.useFakeTimers()
      forceResize()
      vi.runAllTimers()

      expect(mockParent.postMessage).toHaveBeenCalledWith(
        expect.objectContaining({
          source: 'fam-trainingsplan'
        }),
        expect.any(String)
      )

      vi.useRealTimers()
    })

    it('should only send if height changed significantly', () => {
      initIframeAutoResize()

      vi.useFakeTimers()
      forceResize()
      vi.runAllTimers()

      const firstCallCount = mockParent.postMessage.mock.calls.length

      // Force another resize without height change
      forceResize()
      vi.runAllTimers()

      // Should not send if change < MINIMUM_HEIGHT_CHANGE (5px)
      expect(mockParent.postMessage.mock.calls.length).toBeLessThanOrEqual(firstCallCount + 1)

      vi.useRealTimers()
    })

    it('should use custom origin if provided', () => {
      initIframeAutoResize()

      vi.useFakeTimers()
      notifyParentHeight('https://custom-origin.com')
      vi.runAllTimers()

      expect(mockParent.postMessage).toHaveBeenCalledWith(
        expect.any(Object),
        'https://custom-origin.com'
      )

      vi.useRealTimers()
    })
  })

  // ==================== FORCE RESIZE ====================

  describe('forceResize()', () => {
    it('should send resize immediately without debounce', () => {
      initIframeAutoResize()

      vi.useFakeTimers()
      forceResize()

      // Should be called immediately (within requestAnimationFrame)
      vi.runAllTimers()

      expect(mockParent.postMessage).toHaveBeenCalled()

      vi.useRealTimers()
    })

    it('should reset lastSentHeight to force send', () => {
      initIframeAutoResize()

      vi.useFakeTimers()

      // First resize
      forceResize()
      vi.runAllTimers()

      const firstCallCount = mockParent.postMessage.mock.calls.length

      // Force resize again
      forceResize()
      vi.runAllTimers()

      // Should send again because forceResize resets lastSentHeight
      expect(mockParent.postMessage.mock.calls.length).toBeGreaterThan(firstCallCount)

      vi.useRealTimers()
    })
  })

  // ==================== MESSAGE HANDLING ====================

  describe('Message Handling', () => {
    it('should handle init request from parent', () => {
      initIframeAutoResize()

      vi.useFakeTimers()

      const event = new MessageEvent('message', {
        data: { type: 'init' },
        origin: 'https://parent.example.com'
      })

      window.dispatchEvent(event)

      vi.advanceTimersByTime(200)
      vi.runAllTimers()

      expect(mockParent.postMessage).toHaveBeenCalled()

      vi.useRealTimers()
    })

    it('should handle height request from parent', () => {
      initIframeAutoResize()

      vi.useFakeTimers()

      const event = new MessageEvent('message', {
        data: { type: 'requestHeight' },
        origin: 'https://parent.example.com'
      })

      window.dispatchEvent(event)

      vi.runAllTimers()

      expect(mockParent.postMessage).toHaveBeenCalled()

      vi.useRealTimers()
    })

    it('should ignore messages from unknown origins', () => {
      initIframeAutoResize()

      const event = new MessageEvent('message', {
        data: { type: 'init' },
        origin: 'https://unknown-origin.com'
      })

      window.dispatchEvent(event)

      vi.useFakeTimers()
      vi.runAllTimers()

      // Should not respond to unknown origin
      expect(mockParent.postMessage).not.toHaveBeenCalled()

      vi.useRealTimers()
    })

    it('should allow all origins if no allowlist configured', () => {
      delete CONFIG.iframe.allowedOrigins

      initIframeAutoResize()

      vi.useFakeTimers()

      const event = new MessageEvent('message', {
        data: { type: 'init' },
        origin: 'https://any-origin.com'
      })

      window.dispatchEvent(event)

      vi.advanceTimersByTime(200)
      vi.runAllTimers()

      expect(mockParent.postMessage).toHaveBeenCalled()

      vi.useRealTimers()

      CONFIG.iframe.allowedOrigins = ['https://parent.example.com']
    })
  })

  // ==================== STATE ====================

  describe('getState()', () => {
    it('should return current state', () => {
      const state = getState()

      expect(state).toHaveProperty('isInitialized')
      expect(state).toHaveProperty('lastSentHeight')
      expect(state).toHaveProperty('parentOrigin')
      expect(state).toHaveProperty('hasResizeObserver')
      expect(state).toHaveProperty('hasMutationObserver')
      expect(state).toHaveProperty('eventListenerCount')
    })

    it('should reflect initialization status', () => {
      expect(getState().isInitialized).toBe(false)

      initIframeAutoResize()

      expect(getState().isInitialized).toBe(true)
    })

    it('should track event listener count', () => {
      expect(getState().eventListenerCount).toBe(0)

      initIframeAutoResize()

      expect(getState().eventListenerCount).toBeGreaterThan(0)
    })
  })

  // ==================== CLEANUP ====================

  describe('destroyIframeAutoResize()', () => {
    it('should cleanup observers', () => {
      initIframeAutoResize()

      destroyIframeAutoResize()

      expect(mockResizeObserver.disconnect).toHaveBeenCalled()
      expect(mockMutationObserver.disconnect).toHaveBeenCalled()
    })

    it('should remove event listeners', () => {
      initIframeAutoResize()

      const eventCount = getState().eventListenerCount

      destroyIframeAutoResize()

      expect(getState().eventListenerCount).toBe(0)
    })

    it('should remove global functions', () => {
      initIframeAutoResize()

      destroyIframeAutoResize()

      expect(window.notifyParentHeight).toBeUndefined()
      expect(window.forceIframeResize).toBeUndefined()
    })

    it('should reset state', () => {
      initIframeAutoResize()

      destroyIframeAutoResize()

      const state = getState()
      expect(state.isInitialized).toBe(false)
      expect(state.lastSentHeight).toBe(0)
      expect(state.hasResizeObserver).toBe(false)
      expect(state.hasMutationObserver).toBe(false)
    })

    it('should be safe to call when not initialized', () => {
      expect(() => {
        destroyIframeAutoResize()
      }).not.toThrow()
    })

    it('should clear pending timeouts', () => {
      initIframeAutoResize()

      vi.useFakeTimers()
      notifyParentHeight()

      destroyIframeAutoResize()

      vi.runAllTimers()

      // Should not send after destroy
      expect(mockParent.postMessage).not.toHaveBeenCalled()

      vi.useRealTimers()
    })
  })

  // ==================== AUTO-INIT ====================

  describe('Auto-Init', () => {
    it('should not auto-init if not in iframe', () => {
      Object.defineProperty(window, 'self', {
        value: window,
        writable: true,
        configurable: true
      })
      Object.defineProperty(window, 'top', {
        value: window,
        writable: true,
        configurable: true
      })

      // Auto-init runs on module load, we can only test the condition
      expect(window.self).toBe(window.top)
    })

    it('should not auto-init if disabled in config', () => {
      // Note: CONFIG.iframe.autoResize defaults to true and is frozen
      // This test is skipped because we cannot modify frozen config
      // Auto-init behavior is tested via E2E tests
    })
  })

  // ==================== INTEGRATION TESTS ====================

  describe('Integration', () => {
    it('should handle complete resize flow', () => {
      initIframeAutoResize()

      vi.useFakeTimers()

      // Trigger resize
      window.dispatchEvent(new Event('resize'))

      vi.advanceTimersByTime(200)
      vi.runAllTimers()

      expect(mockParent.postMessage).toHaveBeenCalled()

      vi.useRealTimers()
    })

    it('should handle observer callbacks', () => {
      initIframeAutoResize()

      vi.useFakeTimers()

      // Trigger ResizeObserver callback
      if (mockResizeObserver.callback) {
        mockResizeObserver.callback([])
      }

      vi.advanceTimersByTime(200)
      vi.runAllTimers()

      expect(mockParent.postMessage).toHaveBeenCalled()

      vi.useRealTimers()
    })

    it('should handle MutationObserver callbacks', () => {
      initIframeAutoResize()

      vi.useFakeTimers()

      // Trigger MutationObserver callback
      if (mockMutationObserver.callback) {
        mockMutationObserver.callback([])
      }

      vi.advanceTimersByTime(200)
      vi.runAllTimers()

      expect(mockParent.postMessage).toHaveBeenCalled()

      vi.useRealTimers()
    })
  })
})
